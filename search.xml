<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity制作圆环进度条加载场景资源</title>
      <link href="/2021/10/07/Unity%E5%88%B6%E4%BD%9C%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1%E5%8A%A0%E8%BD%BD%E5%9C%BA%E6%99%AF%E8%B5%84%E6%BA%90/"/>
      <url>/2021/10/07/Unity%E5%88%B6%E4%BD%9C%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1%E5%8A%A0%E8%BD%BD%E5%9C%BA%E6%99%AF%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步：场景内UI圆环的搭建"><a href="#第一步：场景内UI圆环的搭建" class="headerlink" title="第一步：场景内UI圆环的搭建"></a>第一步：场景内UI圆环的搭建</h3><p>新建一张Panel作为背景图，在Panel下新建一张Image命名为RoundImage作为外圆环，在外圆环下新建一张image命名为RoundLoading作为内圆环，用来显示进度的，新建两个Text文本，一个作为文字说明，一个作为进度值显示用。调整每个图的位置大小。大概如下图：</p><h3 id="第二步：关键的地方：Image的设置"><a href="#第二步：关键的地方：Image的设置" class="headerlink" title="第二步：关键的地方：Image的设置"></a>第二步：关键的地方：Image的设置</h3><p>外圆环和内圆环必须是大小一致、有颜色差的图片。<br>RoundImage默认设置就好了，需要注意的是将RoundLoading属性设置为如下图：</p><h3 id="第三步：代码实现进度条的加载"><a href="#第三步：代码实现进度条的加载" class="headerlink" title="第三步：代码实现进度条的加载"></a>第三步：代码实现进度条的加载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span> private Image LoadingImage<span class="token punctuation">;</span>//<span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span> private Text LoadingText<span class="token punctuation">;</span>private bool <span class="token assign-left variable">isLoading</span><span class="token operator">=</span>false<span class="token punctuation">;</span>private AsyncOperation asyn<span class="token punctuation">;</span>private void <span class="token function-name function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    StartCoroutine<span class="token punctuation">(</span>LoadScene<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void <span class="token function-name function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token operator">&amp;&amp;</span>LoadingImage<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>LoadingText<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>LoadingImage.fillAmount<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        LoadingImage.fillAmount <span class="token operator">+=</span> Time.deltaTime * <span class="token number">0</span>.05f * <span class="token punctuation">(</span>asyn.isDone ? <span class="token number">10</span> <span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LoadingText.text <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0:P0}"</span>, LoadingImage.fillAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>//对数值进行百分比格式化    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LoadingImage.fillAmount<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        asyn.allowSceneActivation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        print<span class="token punctuation">(</span><span class="token string">"加载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>IEnumerator <span class="token function-name function">LoadScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    asyn <span class="token operator">=</span> SceneManager.LoadSceneAsync<span class="token punctuation">(</span><span class="token string">"New"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    asyn.allowSceneActivation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    yield <span class="token builtin class-name">return</span> asyn<span class="token punctuation">;</span><span class="token punctuation">}</span>private void <span class="token function-name function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>GUI.Button<span class="token punctuation">(</span>new Rect <span class="token punctuation">(</span><span class="token number">200,200</span>,100,100<span class="token punctuation">)</span>,<span class="token string">"加载环形进度条"</span><span class="token punctuation">))</span>    <span class="token punctuation">{</span>        isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现的效果<br>初始：<br>加载：</p><p>加载完成跳转场景：</p><p>这里是为了方便测试用，所以使用了GUI的按钮形式开启加载进度条，加载一个简单的场景，实际使用当中可以用来预加载资源用，写一个状态机轮询加载资源，将代码中的三目运算符改为到达相应状态时将加载速度加快，则进度条加快完成加载，完成需求。</p><p>额外的知识点：<br>Image的显示类型：图片的排列类型 Simple (普通模式)，Sliced (九宫格)，Tiled (平铺),Filed (填充)<br>此处仅相似做一下Filed的笔记。</p><p>属性    说明<br>Fill Method    填充的方法:Horizontal水平方向、Vertical垂直方向、Radial90度、Radial180度、Radial360度<br>Fill Origin    填充的起点：Top顶部、Bottom底部、Left左边、Right右边<br>Fill Amount    填充的量：是从0.00到1.00的数值<br>Clockwise    填充是否按顺时针方向，勾选是顺时针，不勾选为逆时针<br>Preserve Aspect    图片等比缩放<br>Set Native Size    设置图片以原始尺寸显示</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小香猪的终极大法[C</title>
      <link href="/2021/10/06/%E5%B0%8F%E9%A6%99%E7%8C%AA%E7%9A%84%E7%BB%88%E6%9E%81%E5%A4%A7%E6%B3%95-C/"/>
      <url>/2021/10/06/%E5%B0%8F%E9%A6%99%E7%8C%AA%E7%9A%84%E7%BB%88%E6%9E%81%E5%A4%A7%E6%B3%95-C/</url>
      
        <content type="html"><![CDATA[<p>那就是拉粑粑</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/05/hello-world/"/>
      <url>/2021/10/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="我爱小宝贝"><a href="#我爱小宝贝" class="headerlink" title="我爱小宝贝"></a>我爱小宝贝</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="屁股猪拉粑粑猪"><a href="#屁股猪拉粑粑猪" class="headerlink" title="屁股猪拉粑粑猪"></a>屁股猪拉粑粑猪</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
